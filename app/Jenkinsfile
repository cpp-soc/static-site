pipeline {
    agent any

    environment {
        // host paths
        PROD_DIR    = "/opt/docker/site"               // where site/compose.yml lives
        SITE_DIR    = "/opt/docker/site/static-site/app"   // where Dockerfile + app code should live/build from

        IMAGE_NAME      = "static-site"
        IMAGE_LATEST    = "static-site:latest"
        SERVICE_NAME    = "static-site"
        CONTAINER_NAME  = "static-site"
    }

    triggers {
        // optional: poll main in case webhook fails
        pollSCM('H/5 * * * *')
    }

    stages {
        stage('Checkout main') {
            when { branch 'main' }
            steps {
                checkout scm
            }
        }

        stage('Sync code into host build dir') {
            when { branch 'main' }
            steps {
                /*
                 We need the latest app code to be present in /opt/docker/site/static-site
                 so we can build the image FROM that directory using the host docker daemon.

                 rsync copies the checked-out repo (current workspace) into SITE_DIR on the host.
                 Adjust the source path ("./") if your actual app code is under ./app in git.
                */
                sh """
                rsync -a --delete ./ ${SITE_DIR}/
                """
            }
        }

        stage('Build image on host daemon') {
            when { branch 'main' }
            steps {
                /*
                 Build the Docker image as static-site:latest using the host docker socket.
                 After this, the host's Docker daemon now has an updated static-site:latest.
                */
                sh """
                cd ${SITE_DIR}
                docker build -t ${IMAGE_LATEST} -f Dockerfile .
                """
            }
        }

        stage('Redeploy via docker compose') {
            when { branch 'main' }
            steps {
                /*
                 Now tell docker compose (in /opt/docker/site/compose.yml) to recreate the service.
                 compose.yml MUST define the service like:
                 
                 static-site:
                   image: static-site:latest
                   container_name: static-site
                   ...

                 and MUST NOT have a 'build:' block anymore.
                */
                sh """
                cd ${PROD_DIR}
                docker compose up -d ${SERVICE_NAME}
                """
            }
        }
    }

    post {
        success {
            echo "Deploy succeeded. ${IMAGE_LATEST} is now running as ${CONTAINER_NAME}."
        }
        failure {
            echo "Deploy failed. Check build logs."
        }
    }
}
